{"version":3,"sources":["upload.js","app.js"],"names":["bytesToSize","bytes","sizes","i","parseInt","Math","floor","log","round","pow","element","tag","classes","content","el","document","createElement","length","classList","add","textContent","isContains","array","obj","some","elem","name","noop","upload","selector","options","files","input","querySelector","open","preview","style","display","multi","setAttribute","accept","Array","isArray","join","insertAdjacentElement","triggerInput","click","changeHandler","event","target","filesObj","newFiles","Object","keys","map","key","innerHTML","forEach","file","push","type","match","reader","FileReader","onload","ev","insertAdjacentHTML","result","size","readAsDataURL","clearPreview","bottom","removeHandler","dataset","filter","block","closest","setTimeout","remove","uploadHandler","onUpload","querySelectorAll","previewInfo","clickHandler","e","value","addEventListener"],"mappings":"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","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["function bytesToSize(bytes) {\r\n    let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    if (!bytes) {\r\n        return '0 Byte';\r\n    }\r\n    let i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n    return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];\r\n}\r\nconst element = (tag, classes = [], content) => {\r\n    const el = document.createElement(tag);\r\n    if (classes.length) {\r\n        el.classList.add(...classes)\r\n    }\r\n    if (content) {\r\n        el.textContent = content;\r\n    }\r\n    return el\r\n};\r\nconst isContains = (array, obj) => {\r\n   return array.some(elem => {\r\n        return obj.name === elem.name\r\n    });\r\n};\r\nconst noop = function () {};\r\nexport function upload(selector, options = {}) {\r\n    let files = [];\r\n    const input = document.querySelector(selector);\r\n    const open = element('button', ['btn'], 'Открыть');\r\n    const upload = element('button', ['btn', 'primary'], 'Загрузить');\r\n    const preview = element('div', ['preview']);\r\n    upload.style.display = 'none';\r\n    if (options.multi) {\r\n        input.setAttribute('multiple', true)\r\n    }\r\n    if (options.accept && Array.isArray(options.accept)) {\r\n        input.setAttribute('accept', options.accept.join(','))\r\n    }\r\n    input.insertAdjacentElement('afterend', preview);\r\n    input.insertAdjacentElement('afterend', upload);\r\n    input.insertAdjacentElement('afterend', open);\r\n    const triggerInput = () => {\r\n        input.click()\r\n    };\r\n    const changeHandler = event => {\r\n        if (!event.target.files.length) {\r\n            return\r\n        }\r\n        const filesObj = event.target.files;\r\n        const newFiles = Object.keys(filesObj).map(key => {\r\n            return filesObj[key]\r\n        });\r\n        preview.innerHTML = '';\r\n        if (!files.length) {\r\n            files = newFiles;\r\n        } else {\r\n            newFiles.forEach(file => {\r\n                if (!isContains(files, file)) {\r\n                    files.push(file)\r\n                }\r\n            });\r\n        }\r\n        upload.style.display = 'inline';\r\n        files.forEach(file => {\r\n            if (!file.type.match('image')) {\r\n                return\r\n            }\r\n            const reader = new FileReader();\r\n            reader.onload = ev => {\r\n                preview.insertAdjacentHTML('afterbegin', `\r\n                        <div class=\"preview-image\">\r\n                            <div class=\"preview-remove\" data-name=\"${file.name}\">&times;</div>\r\n                            <img alt=\"${file.name}\" src=\"${ev.target.result}\"/>\r\n                            <div class=\"preview-info\">\r\n                                <span>${file.name}</span>\r\n                                ${bytesToSize(file.size)}\r\n                            </div>\r\n                        </div>\r\n                    `);\r\n            };\r\n            reader.readAsDataURL(file);\r\n        })\r\n    };\r\n    const clearPreview = el => {\r\n       el.style.bottom = '0px';\r\n       el.innerHTML = `<div class=\"preview-info-progress\"></div>`\r\n    };\r\n    const removeHandler = event => {\r\n        if (!event.target.dataset.name) {\r\n            return\r\n        }\r\n        const {name} = event.target.dataset;\r\n        files = files.filter(file => file.name !== name);\r\n        if (!files.length) {\r\n            upload.style.display = 'none';\r\n        }\r\n        const block = preview\r\n            .querySelector(`[data-name=\"${name}\"]`)\r\n            .closest('.preview-image');\r\n        block.classList.add('removing');\r\n        setTimeout(() => block.remove(), 300)\r\n    };\r\n    const uploadHandler = () => {\r\n        const onUpload = options.onUpload ?? noop;\r\n        preview.querySelectorAll('.preview-remove').forEach(el => el.remove());\r\n        const previewInfo = preview.querySelectorAll('.preview-info');\r\n        previewInfo.forEach(clearPreview);\r\n        onUpload(files)\r\n    };\r\n    const clickHandler = (e) => {\r\n        input.value = ''\r\n    };\r\n    open.addEventListener('click', triggerInput);\r\n    input.addEventListener('change', changeHandler);\r\n    input.addEventListener('click', clickHandler);\r\n    preview.addEventListener('click', removeHandler);\r\n    upload.addEventListener('click', uploadHandler)\r\n}","import {upload} from './upload'\r\nupload('#file', {\r\n    multi: true,\r\n    accept: ['.png', '.jpg', 'jpeg', '.gif'],\r\n    onUpload(files) {\r\n\r\n    }\r\n});"]}